<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-07-26T10:59:40-04:00</updated><id>http://localhost:4000/</id><title type="html">Bradley Zhou</title><entry><title type="html">üñ• LILisp</title><link href="http://localhost:4000/lilisp/" rel="alternate" type="text/html" title="üñ• LILisp" /><published>2018-07-10T00:00:00-04:00</published><updated>2018-07-10T00:00:00-04:00</updated><id>http://localhost:4000/lilisp</id><content type="html" xml:base="http://localhost:4000/lilisp/">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/bradley-z/bradley-z.github.io/master/assets/images/post_images/lilisp.gif&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;This project shared concepts with many of my previous assignments, namely 122‚Äôs Clac and C0VM, and 213‚Äôs Shell Lab. This project also served as a way for me to further explore my interest in systems programming. Additionally, much inspiration came from Daniel Holden‚Äôs book &lt;em&gt;Build Your Own Lisp&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;functionality&quot;&gt;Functionality&lt;/h2&gt;
&lt;p&gt;I used the Micro Parser Combinators library to automagically parse each input line into an abstract syntax tree. These were then converted into trees of what I defined as ‚Äúlisp_vals,‚Äù which have one of many different types including numbers, symbols, or functions. Features of this implementation include builtin functions, user defined functions, recursion, loading files, conditionals, variables, mathematical and logical operations, and error handling. A more detailed list of functions can be found in the README &lt;a href=&quot;https://github.com/bradley-z/LILisp/blob/master/README.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;
&lt;p&gt;This project was definitely one of those that demonstrated the beauty (and delicacy) of C. Like Malloc Lab, this project was littered with seg faults and pointer errors; one malloc call of the wrong size could break all my functions. But as someone who‚Äôs favorite lab was Malloc, I found working through these errors to be rewarding, albeit definitely frustrating at times.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bradley-z/LILisp&quot;&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="project" /><summary type="html"></summary></entry><entry><title type="html">üéôÔ∏è gPodder Podcast Engine</title><link href="http://localhost:4000/gpodder-engine/" rel="alternate" type="text/html" title="üéôÔ∏è gPodder Podcast Engine" /><published>2018-06-16T00:00:00-04:00</published><updated>2018-06-16T00:00:00-04:00</updated><id>http://localhost:4000/gpodder-engine</id><content type="html" xml:base="http://localhost:4000/gpodder-engine/">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/bradley-z/bradley-z.github.io/master/assets/images/post_images/podcast_engine_one.png&quot; alt=&quot;Screenshot&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/bradley-z/bradley-z.github.io/master/assets/images/post_images/podcast_engine_two.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;Capital One‚Äôs Software Engineering Summit is a selective week long summit held at Capital One Labs just outside DC. This web app served as the final portion of the application to the summit and its purpose was to organize podcast subscriptions, visualize popular podcasts, and recommend new podcasts utilizing the API of a service called gPodder.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;functionality&quot;&gt;Functionality&lt;/h2&gt;
&lt;p&gt;The main frameworks used were Flask for the backend and Bootstrap for the frontend. Additional tools used include mygpoclient to access gPodder‚Äôs API, Requests to issue GET requests to other HTML pages, Beautiful Soup to parse such requests, thesauropod to generate recommendations, and Word Cloud to generate frequency visualizations. Features of this web app include search, listing subscriptions, searching by and within genre, suggesting what podcast one should listen to first, giving recommendations for new podcasts, data visualizations, and logins to view one‚Äôs own subscription data.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;
&lt;p&gt;When I was first issued this challenge, I was very intimidated; my experience with any kind of web development or even any project outside a class assignment was essentially none. In fact, it took me two or three days just to pick a framework to use. I also faced challenges with the API, given that it wasn‚Äôt very robust and I had no experience working with REST before. But once I picked a framework and started learning the basics, the rest was relatively repetitive. But overall, this one project taught me a lot about web development regardless of whether or not it was selected for the summit.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bradley-z/Capital-One-Mindsumo&quot;&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bradleyzhou-capital-one.herokuapp.com/&quot;&gt;Website&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="project" /><summary type="html"></summary></entry><entry><title type="html">ü§ñ HQ Helping Hand</title><link href="http://localhost:4000/hq-helpinghand/" rel="alternate" type="text/html" title="ü§ñ HQ Helping Hand" /><published>2018-05-11T00:00:00-04:00</published><updated>2018-05-11T00:00:00-04:00</updated><id>http://localhost:4000/hq-helpinghand</id><content type="html" xml:base="http://localhost:4000/hq-helpinghand/">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/bradley-z/bradley-z.github.io/master/assets/images/post_images/hq-helpinghand.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;This was one of the first projects I created outside of the classroom. The inspiration came from a time when a bunch of us were obsessed with the game and would play almost every day. Another online bot, HQuack, was shut down before any of us knew about it, so as a fun exercise, I decided to try and program my own.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;functionality&quot;&gt;Functionality&lt;/h2&gt;
&lt;p&gt;This program works by utilizing Tesseract OCR to extract the question and possible answers text from a screenshot. The program then uses Google Search API to search a formatted version of the question. Finally, the program iterates through the search results and returns the most probable answer from these results.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;/h2&gt;
&lt;p&gt;This program‚Äôs inconvenience relegates it to more of a proof of concept than an actual practical tool during live games. After, all this was hacked together over the span of only about a day or two. But it does support the idea that search can be successfully automated within the ten second time frame. I‚Äôm sure that some more fine tuning and adding the ability to input live screenshots would make this actually practical.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bradley-z/HQ-HelpingHand&quot;&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="project" /><summary type="html"></summary></entry></feed>